// AI Service —Å OpenRouter API –¥–ª—è QWEN 2.5 –∏ NVIDIA
export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  imageUrl?: string; // URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  isImage?: boolean; // –§–ª–∞–≥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
}

export interface ChatSession {
  id: string;
  title: string;
  messages: ChatMessage[];
  createdAt: Date;
  updatedAt: Date;
}

export type AIModel = 'qwen' | 'nvidia' | 'tencent';

class AIService {
  private apiKey = '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';
  private baseURL = 'https://openrouter.ai/api/v1';
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –≤ localStorage
  private saveSessions(sessions: ChatSession[]): void {
    localStorage.setItem('ai_chat_sessions', JSON.stringify(sessions));
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –∏–∑ localStorage
  private loadSessions(): ChatSession[] {
    const saved = localStorage.getItem('ai_chat_sessions');
    if (!saved) return [];
    
    try {
      const sessions = JSON.parse(saved);
      return sessions.map((session: any) => ({
        ...session,
        createdAt: new Date(session.createdAt),
        updatedAt: new Date(session.updatedAt),
        messages: session.messages.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }))
      }));
    } catch (error) {
      console.error('Error loading chat sessions:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —á–∞—Ç–∞
  getAllSessions(): ChatSession[] {
    return this.loadSessions();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  createSession(): ChatSession {
    const newSession: ChatSession = {
      id: Date.now().toString(),
      title: '–ù–æ–≤—ã–π —á–∞—Ç',
      messages: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const sessions = this.loadSessions();
    sessions.unshift(newSession);
    this.saveSessions(sessions);

    return newSession;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID
  getSession(sessionId: string): ChatSession | null {
    const sessions = this.loadSessions();
    return sessions.find(session => session.id === sessionId) || null;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  updateSession(sessionId: string, updates: Partial<ChatSession>): void {
    const sessions = this.loadSessions();
    const sessionIndex = sessions.findIndex(session => session.id === sessionId);
    
    if (sessionIndex !== -1) {
      sessions[sessionIndex] = {
        ...sessions[sessionIndex],
        ...updates,
        updatedAt: new Date()
      };
      this.saveSessions(sessions);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  deleteSession(sessionId: string): void {
    const sessions = this.loadSessions();
    const filteredSessions = sessions.filter(session => session.id !== sessionId);
    this.saveSessions(filteredSessions);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI —á–µ—Ä–µ–∑ OpenRouter
  async sendMessage(sessionId: string, message: string, model: AIModel = 'qwen'): Promise<ChatMessage> {
    const session = this.getSession(sessionId);
    if (!session) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: message,
      timestamp: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
    const updatedMessages = [...session.messages, userMessage];
    this.updateSession(sessionId, { messages: updatedMessages });

    try {
      // –í—ã–∑—ã–≤–∞–µ–º AI —á–µ—Ä–µ–∑ OpenRouter
      const aiResponse = await this.callAI(updatedMessages, model);
      
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: aiResponse.content,
        timestamp: new Date(),
        imageUrl: aiResponse.imageUrl,
        isImage: aiResponse.isImage
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ —Å–µ—Å—Å–∏—é
      const finalMessages = [...updatedMessages, aiMessage];
      this.updateSession(sessionId, { 
        messages: finalMessages,
        title: session.messages.length === 0 ? this.generateTitleFromMessage(message) : session.title
      });

      return aiMessage;
    } catch (error) {
      console.error('Error calling QWEN 2.5:', error);
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
2. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á`,
        timestamp: new Date()
      };

      const finalMessages = [...updatedMessages, errorMessage];
      this.updateSession(sessionId, { 
        messages: finalMessages,
        title: session.messages.length === 0 ? this.generateTitleFromMessage(message) : session.title
      });

      return errorMessage;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ AI —á–µ—Ä–µ–∑ OpenRouter API
  private async callAI(messages: ChatMessage[], model: AIModel): Promise<{content: string, imageUrl?: string, isImage?: boolean}> {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç OpenRouter
      const openRouterMessages = messages.map(msg => ({
        role: msg.role,
        content: msg.content
      }));

      const modelName = model === 'qwen' 
        ? 'qwen/qwen-2.5-vl-7b-instruct' 
        : model === 'nvidia'
        ? 'nvidia/nemotron-nano-9b-v2:free'
        : 'tencent/hunyuan-a13b-instruct:free';

      const response = await fetch(`${this.baseURL}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'Kanban Board AI Chat'
        },
        body: JSON.stringify({
          model: modelName,
          messages: openRouterMessages,
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≤—ã–≤–æ–¥–∞; –º–Ω–æ–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã
          max_tokens: 4096,
          temperature: 0.7,
          top_p: 0.9
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`API Error: ${response.status} - ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      let rawContent = data.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
      let finishReason: string | undefined = data.choices[0]?.finish_reason;
      let content = this.sanitizeAIContent(rawContent);

      // –ê–≤—Ç–æ–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±–æ—Ä–≤–∞–ª–∞ –ø–æ –¥–ª–∏–Ω–µ
      // –î–µ–ª–∞–µ–º –¥–æ 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–≥—Ä—É–∑–æ–∫, –æ–±—ä–µ–¥–∏–Ω—è—è —Ç–µ–∫—Å—Ç
      let continuationAttempts = 0;
      while (finishReason === 'length' && continuationAttempts < 3) {
        continuationAttempts++;
        const continueMessages = [
          ...openRouterMessages,
          { role: 'assistant', content },
          { role: 'user', content: '–ü—Ä–æ–¥–æ–ª–∂–∞–π. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤.' }
        ];

        const contRes = await fetch(`${this.baseURL}/chat/completions`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': window.location.origin,
            'X-Title': 'Kanban Board AI Chat'
          },
          body: JSON.stringify({
            model: modelName,
            messages: continueMessages,
            max_tokens: 4096,
            temperature: 0.7,
            top_p: 0.9
          })
        });

        if (!contRes.ok) break;
        const contData = await contRes.json();
        const contRaw = contData.choices[0]?.message?.content || '';
        const contClean = this.sanitizeAIContent(contRaw);
        finishReason = contData.choices[0]?.finish_reason;
        content += (contClean ? `
${contClean}` : '');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const lastUserMessage = messages[messages.length - 1];
      const isImageRequest = this.isImageGenerationRequest(lastUserMessage.content);
      console.log('Image request check:', { 
        userMessage: lastUserMessage.content, 
        aiResponse: content,
        isImageRequest, 
        model 
      });
      
      if (isImageRequest) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        console.log('Generating image for:', lastUserMessage.content);
        const imageUrl = await this.generateImage(lastUserMessage.content);
        return {
          content: `üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${lastUserMessage.content}"`,
          imageUrl,
          isImage: true
        };
      }
      
      return { content };
      
    } catch (error) {
      console.error('AI API error:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–≥–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <answer> ... </answer>)
  private sanitizeAIContent(content: string): string {
    try {
      let cleaned = content.trim();
      // –£–¥–∞–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É <answer>...</answer> –∏ –ø–æ–¥–æ–±–Ω—ã–µ
      cleaned = cleaned.replace(/^\s*<answer>\s*/i, '').replace(/\s*<\/answer>\s*$/i, '');
      // –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–µ–≥–∏ –≤—Ä–æ–¥–µ <thinking>, <summary> –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
      cleaned = cleaned.replace(/^\s*<[^>]+>\s*/i, '');
      cleaned = cleaned.replace(/\s*<\/[^>]+>\s*$/i, '');
      return cleaned.trim();
    } catch {
      return content;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private isImageGenerationRequest(content: string): boolean {
    const imageKeywords = [
      '–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É', '–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É',
      '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É', '–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É', '–ø–æ–∫–∞–∂–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      'draw', 'create image', 'generate image', 'show picture', 'paint',
      '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '—Ä–∏—Å—É–Ω–æ–∫', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    ];
    
    const lowerContent = content.toLowerCase();
    return imageKeywords.some(keyword => lowerContent.includes(keyword));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ API
  private async generateImage(prompt: string): Promise<string> {
    try {
      console.log('Generating image with prompt:', prompt);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ API –ø–æ –æ—á–µ—Ä–µ–¥–∏
      const apis = [
        () => this.generateWithHuggingFace(prompt),
        () => this.generateWithPicsum(prompt),
        () => this.generateWithLoremPicsum(prompt)
      ];

      for (const api of apis) {
        try {
          const result = await api();
          if (result) {
            console.log('Image generated successfully with API');
            return result;
          }
        } catch (error) {
          console.log('API failed, trying next:', error);
          continue;
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.log('All APIs failed, using fallback');
      return this.generateFallbackImage(prompt);
      
    } catch (error) {
      console.error('Error generating image:', error);
      return this.generateFallbackImage(prompt);
    }
  }

  // Hugging Face API
  private async generateWithHuggingFace(prompt: string): Promise<string | null> {
    const response = await fetch('https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer 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`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: prompt,
        parameters: {
          num_inference_steps: 20,
          guidance_scale: 7.5,
          width: 512,
          height: 512
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Hugging Face API error: ${response.status}`);
    }

    const imageBlob = await response.blob();
    return URL.createObjectURL(imageBlob);
  }

  // Picsum Photos API (—Å–ª—É—á–∞–π–Ω—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  private async generateWithPicsum(prompt: string): Promise<string | null> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
    const seed = this.hashCode(prompt) % 1000;
    return `https://picsum.photos/seed/${seed}/512/512`;
  }

  // Lorem Picsum —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  private async generateWithLoremPicsum(prompt: string): Promise<string | null> {
    const seed = this.hashCode(prompt) % 1000;
    const filters = ['blur', 'grayscale', 'sepia'];
    const filter = filters[seed % filters.length];
    return `https://picsum.photos/seed/${seed}/512/512?${filter}`;
  }

  // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed
  private hashCode(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  // Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  private generateFallbackImage(prompt: string): string {
    const colors = ['4F46E5', '059669', 'DC2626', '7C3AED', 'EA580C', '0891B2'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    
    const shortPrompt = prompt.slice(0, 15).replace(/\s+/g, '+');
    return `https://via.placeholder.com/512x512/${randomColor}/FFFFFF?text=${encodeURIComponent(shortPrompt)}`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private generateTitleFromMessage(message: string): string {
    const words = message.split(' ').slice(0, 6);
    return words.join(' ') + (message.split(' ').length > 6 ? '...' : '');
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
  clearAllSessions(): void {
    localStorage.removeItem('ai_chat_sessions');
  }
}

export const aiService = new AIService();